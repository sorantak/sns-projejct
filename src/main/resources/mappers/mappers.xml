<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- namespace와 id를 이용해서 DAO의 메소드와 연결, 쿼리문이 db랑 연동하도록 함 -->
<mapper namespace="com.myspring.mysns.mappers.mappers">

	<!-- resultMap은 DB에 있는 데이터들을 묶어줌 column은 MySQL의 key, property는 vo의 변수 -->
	<resultMap type="userVO" id="userResult">
		<result column="id" property="id" />
		<result column="username" property="username" />
		<result column="password" property="password" />
		<result column="created_at" property="createdAt" />
	</resultMap>

	<resultMap type="tokenVO" id="tokenResult">
		<result column="token" property="token" />
		<result column="user_id" property="userId" />
		<result column="created_at" property="createdAt" />
	</resultMap>

	<resultMap type="postVO" id="postResult">
		<result column="id" property="id" />
		<result column="user_id" property="userId" />
		<result column="title" property="title" />
		<result column="content" property="content" />
		<result column="created_at" property="createdAt" />
	</resultMap>
	
	<resultMap type="postAndUserVO" id="postAndUserResult">
		<result column="id" property="id" />
		<result column="user_id" property="userId" />
		<result column="title" property="title" />
		<result column="content" property="content" />
		<result column="created_at" property="createdAt" />
		<association property="user" resultMap="UserNoPw"></association>
	</resultMap>
	
	<resultMap type="userVO" id="UserNoPw">
		<result column="id" property="id" />
		<result column="username" property="username" />
		<result column="created_at" property="createdAt" />
	</resultMap>


	<!-- 쿼리문의 id들 -->
	<!-- parameterType 주의. list니까 map으로 보여줘야 하는 것? -->
	<select id="findAllUsersList" resultMap="userResult">
		<![CDATA[
			SELECT * FROM user
		]]>
	</select>

	<select id="findUserById" resultMap="userResult"
		parameterType="Long">
		<![CDATA[
			SELECT * FROM user 
			WHERE id=#{id}
		]]>
	</select>

	<!-- insert라서 다른 sql문하고 조금 다른 형태 -->
	<insert id="saveUser" parameterType="userVO" keyProperty="id"
		useGeneratedKeys="true">
		<![CDATA[
			INSERT INTO user(username, password) 
			VALUES(#{username},#{password})
		]]>
	</insert>

	<select id="logInByUser" resultMap="userResult"
		parameterType="userVO">
		<![CDATA[
			SELECT * FROM user 
			WHERE username=#{username} AND password=#{password}
		]]>
	</select>

	<insert id="createToken" parameterType="tokenVO"
		keyProperty="token" useGeneratedKeys="true">
		<![CDATA[
			INSERT INTO token(token, user_id)
			VALUES(#{token}, #{userId})
		]]>
	</insert>

	<!-- 무슨 역할 하는 메소드? -->
	<select id="viewUserByToken" resultMap="tokenResult"
		parameterType="String">
		<![CDATA[
			SELECT * FROM token
			WHERE token=#{token}
		]]>
	</select>

	<!-- post 관련 -->
	<!-- 글 저장 -->
	<insert id="savePost" parameterType="postVO" keyProperty="id"
		useGeneratedKeys="true">
		<![CDATA[
			INSERT INTO post(user_id, title, content) 
			VALUES(#{userId}, #{title}, #{content})
		]]>
	</insert>

	<!-- id로 글 조회 -->
	<select id="findPostById" resultMap="postResult"
		parameterType="Long">
		<![CDATA[
			SELECT * FROM post 
			WHERE id=#{id}
		]]>
	</select>

	<!-- 계층형 테이블 만들어서 전체 조회 -->
	<select id="findAllPost" resultMap="postAndUserResult">
		<![CDATA[
			SELECT post.id, post.user_id, post.title, post.content, post.created_at, user.id, user.username, user.created_at
			FROM post
			LEFT OUTER JOIN user
			ON post.user_id = user.id;
		]]>
	</select>

</mapper>